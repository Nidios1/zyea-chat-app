name: Build IPA (macOS Direct)

on:
  push:
    branches:
      - main
      - master
      - develop
    paths:
      - 'mobile-expo/src/**'
      - 'mobile-expo/App.tsx'
      - 'mobile-expo/app.json'
      - 'mobile-expo/package.json'
      - '.github/workflows/build-ipa-macos.yml'
  workflow_dispatch:

jobs:
  build-ipa:
    name: Build iOS IPA (macOS)
    runs-on: macos-latest
    
    defaults:
      run:
        working-directory: ./mobile-expo
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: mobile-expo/package-lock.json

      - name: Install dependencies
        working-directory: ./mobile-expo
        run: npm ci

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest

      - name: Prebuild iOS project
        working-directory: ./mobile-expo
        run: |
          echo "Running expo prebuild..."
          npx expo prebuild --platform ios --clean
          
          echo "Checking prebuild output..."
          if [ -d "ios" ]; then
            echo "✅ iOS directory created"
            ls -la ios/ | head -10
          else
            echo "❌ iOS directory not found!"
            exit 1
          fi
          
      - name: Install CocoaPods dependencies
        working-directory: ./mobile-expo/ios
        run: |
          echo "Installing CocoaPods dependencies..."
          if [ -f "Podfile" ]; then
            echo "Podfile found, running pod install..."
            pod install --repo-update
            echo "✅ CocoaPods installed"
          else
            echo "⚠️  No Podfile found, skipping pod install"
          fi

      - name: List available schemes
        working-directory: ./mobile-expo/ios
        id: list_schemes
        run: |
          WORKSPACE=$(find . -name "*.xcworkspace" | head -1)
          echo "Found workspace: $WORKSPACE"
          echo "Available schemes:"
          xcodebuild -list -workspace "$WORKSPACE" || xcodebuild -list -project "$(find . -name "*.xcodeproj" | head -1)"
          
          # Try to find the scheme name automatically
          SCHEME=$(xcodebuild -list -workspace "$WORKSPACE" 2>/dev/null | grep -A 100 "Schemes:" | grep -v "Schemes:" | head -1 | xargs || echo "App")
          echo "Using scheme: $SCHEME"
          echo "scheme_name=$SCHEME" >> $GITHUB_OUTPUT
          echo "workspace_path=$WORKSPACE" >> $GITHUB_OUTPUT

      - name: Create exportOptions.plist
        working-directory: ./mobile-expo/ios
        run: |
          cat > exportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>development</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string></string>
            <key>provisioningProfiles</key>
            <dict/>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <false/>
            <key>compileBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF
          
          echo "Created exportOptions.plist:"
          cat exportOptions.plist

      - name: Build IPA with xcodebuild (unsigned)
        working-directory: ./mobile-expo/ios
        run: |
          WORKSPACE="${{ steps.list_schemes.outputs.workspace_path }}"
          SCHEME="${{ steps.list_schemes.outputs.scheme_name }}"
          
          echo "Building with workspace: $WORKSPACE"
          echo "Building with scheme: $SCHEME"
          
          mkdir -p build-artifacts
          
          # Get build output path before building
          echo "Getting build settings..."
          BUILT_PRODUCTS_DIR=$(xcodebuild -showBuildSettings \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration Release \
            -sdk iphoneos 2>/dev/null | \
            grep "BUILT_PRODUCTS_DIR" | \
            head -1 | \
            sed 's/.*= *//' | \
            xargs)
          
          echo "Expected build output: $BUILT_PRODUCTS_DIR"
          
          # Build app directly (no archive needed for unsigned)
          echo "Step 1: Building app..."
          xcodebuild clean build \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -derivedDataPath ./build \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            -allowProvisioningUpdates
          
          echo "Build completed!"
          
          # Find the .app bundle - comprehensive search
          echo "Step 2: Searching for .app bundle..."
          
          APP_BUNDLE=""
          
          # Method 1: Use the expected build path
          if [ -n "$BUILT_PRODUCTS_DIR" ] && [ -d "$BUILT_PRODUCTS_DIR" ]; then
            echo "Checking expected path: $BUILT_PRODUCTS_DIR"
            APP_BUNDLE=$(find "$BUILT_PRODUCTS_DIR" -name "*.app" -type d 2>/dev/null | head -1)
          fi
          
          # Method 2: Look in build/Build/Products
          if [ -z "$APP_BUNDLE" ]; then
            echo "Checking build/Build/Products..."
            APP_BUNDLE=$(find build/Build/Products -name "*.app" -type d 2>/dev/null | head -1)
          fi
          
          # Method 3: Look in build directory recursively
          if [ -z "$APP_BUNDLE" ]; then
            echo "Searching entire build directory..."
            APP_BUNDLE=$(find build -name "*.app" -type d 2>/dev/null | head -1)
          fi
          
          # Method 4: Look in current directory
          if [ -z "$APP_BUNDLE" ]; then
            echo "Searching current directory..."
            APP_BUNDLE=$(find . -name "*.app" -type d -not -path "./build-artifacts/*" 2>/dev/null | head -1)
          fi
          
          # Debug output
          echo ""
          echo "=== DEBUG INFO ==="
          echo "Build directory exists: $(test -d build && echo 'YES' || echo 'NO')"
          if [ -d build ]; then
            echo "Build directory contents:"
            ls -la build/ | head -20
            echo ""
            echo "Searching for .app recursively in build/:"
            find build -name "*.app" -type d 2>/dev/null || echo "No .app found in build/"
          fi
          echo "=================="
          echo ""
          
          if [ -z "$APP_BUNDLE" ] || [ ! -d "$APP_BUNDLE" ]; then
            echo "❌ ERROR: No .app bundle found!"
            echo "Tried searching in:"
            echo "  - $BUILT_PRODUCTS_DIR"
            echo "  - build/Build/Products"
            echo "  - build/ (recursive)"
            echo "  - ./ (recursive)"
            exit 1
          fi
          
          echo "✅ Found app bundle: $APP_BUNDLE"
          ls -la "$APP_BUNDLE" | head -5
          
          # Create Payload directory for IPA
          echo ""
          echo "Step 3: Creating IPA package..."
          mkdir -p build-artifacts/Payload
          cp -R "$APP_BUNDLE" build-artifacts/Payload/
          
          # Create IPA by zipping Payload
          cd build-artifacts
          zip -r app.ipa Payload
          cd ..
          
          echo ""
          echo "✅ IPA created successfully!"
          ls -lh build-artifacts/app.ipa

      - name: Find and upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-${{ github.run_number }}-${{ github.sha }}
          path: mobile-expo/ios/build-artifacts/*.ipa
          retention-days: 30
          if-no-files-found: error

