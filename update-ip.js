/**
 * Script ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t IP WiFi trong t·∫•t c·∫£ c√°c file c·∫•u h√¨nh
 * Ch·∫°y: node update-ip.js
 */

const fs = require('fs');
const path = require('path');
const os = require('os');

// L·∫•y IP WiFi hi·ªán t·∫°i
function getCurrentWiFiIP() {
  const interfaces = os.networkInterfaces();
  
  // T√¨m interface Wi-Fi
  for (const name of Object.keys(interfaces)) {
    if (name.toLowerCase().includes('wi-fi') || name.toLowerCase().includes('wireless')) {
      for (const iface of interfaces[name]) {
        // L·∫•y IPv4 v√† b·ªè qua localhost
        if (iface.family === 'IPv4' && !iface.internal) {
          return iface.address;
        }
      }
    }
  }
  
  // N·∫øu kh√¥ng t√¨m th·∫•y Wi-Fi, l·∫•y IP ƒë·∫ßu ti√™n kh√¥ng ph·∫£i localhost
  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      if (iface.family === 'IPv4' && !iface.internal) {
        return iface.address;
      }
    }
  }
  
  return null;
}

// C·∫≠p nh·∫≠t IP trong file
function updateIPInFile(filePath, oldIP, newIP) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    const oldContent = content;
    
    // Thay th·∫ø t·∫•t c·∫£ c√°c instance c·ªßa IP c≈© b·∫±ng IP m·ªõi
    const regex = new RegExp(oldIP.replace(/\./g, '\\.'), 'g');
    content = content.replace(regex, newIP);
    
    if (content !== oldContent) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t: ${filePath}`);
      return true;
    } else {
      console.log(`‚è≠Ô∏è  B·ªè qua: ${filePath} (kh√¥ng c√≥ thay ƒë·ªïi)`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t ${filePath}:`, error.message);
    return false;
  }
}

// Danh s√°ch c√°c file c·∫ßn c·∫≠p nh·∫≠t
const filesToUpdate = [
  'server/config.env',
  'client/src/utils/platformConfig.js',
  'client/src/utils/imageUtils.js',
  'client/src/components/Chat/ChatArea.js',
  'client/capacitor.config.ts',
  'client/package.json'
];

// Main function
function main() {
  console.log('üîç ƒêang ki·ªÉm tra IP WiFi hi·ªán t·∫°i...\n');
  
  const currentIP = getCurrentWiFiIP();
  
  if (!currentIP) {
    console.error('‚ùå Kh√¥ng t√¨m th·∫•y IP WiFi!');
    process.exit(1);
  }
  
  console.log(`üì° IP WiFi hi·ªán t·∫°i: ${currentIP}\n`);
  
  // ƒê·ªçc IP c≈© t·ª´ config.env
  const configPath = path.join(__dirname, 'server/config.env');
  const configContent = fs.readFileSync(configPath, 'utf8');
  const match = configContent.match(/SERVER_URL=http:\/\/([\d.]+):/);
  
  if (!match) {
    console.error('‚ùå Kh√¥ng t√¨m th·∫•y IP c≈© trong config.env');
    process.exit(1);
  }
  
  const oldIP = match[1];
  
  if (oldIP === currentIP) {
    console.log('‚úÖ IP kh√¥ng thay ƒë·ªïi, kh√¥ng c·∫ßn c·∫≠p nh·∫≠t!');
    process.exit(0);
  }
  
  console.log(`üîÑ ƒêang c·∫≠p nh·∫≠t t·ª´ ${oldIP} sang ${currentIP}...\n`);
  
  let updatedCount = 0;
  
  // C·∫≠p nh·∫≠t t·ª´ng file
  for (const file of filesToUpdate) {
    const filePath = path.join(__dirname, file);
    if (fs.existsSync(filePath)) {
      if (updateIPInFile(filePath, oldIP, currentIP)) {
        updatedCount++;
      }
    } else {
      console.log(`‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y: ${file}`);
    }
  }
  
  console.log(`\n‚úÖ Ho√†n t·∫•t! ƒê√£ c·∫≠p nh·∫≠t ${updatedCount} file(s).`);
  console.log(`\nüìù IP c≈©: ${oldIP}`);
  console.log(`üìù IP m·ªõi: ${currentIP}`);
  console.log('\nüí° H√£y kh·ªüi ƒë·ªông l·∫°i server v√† client ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi!');
}

// Ch·∫°y script
main();

