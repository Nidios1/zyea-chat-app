#!/usr/bin/env node

/**
 * Debug script ƒë·ªÉ ki·ªÉm tra v·∫•n ƒë·ªÅ m√†n h√¨nh ƒëen khi build IPA
 * Ch·∫°y: node debug-black-screen.js
 */

const fs = require('fs');
const path = require('path');

console.log('üîç DEBUGGING BLACK SCREEN ISSUE');
console.log('================================');

// 1. Ki·ªÉm tra build files
console.log('\nüìÅ Checking build files...');
const buildDir = path.join(__dirname, 'build');
const publicDir = path.join(__dirname, 'ios', 'App', 'App', 'public');

if (fs.existsSync(buildDir)) {
  console.log('‚úÖ Build directory exists');
  const buildFiles = fs.readdirSync(buildDir);
  console.log('üìÑ Build files:', buildFiles);
  
  // Ki·ªÉm tra index.html
  const indexPath = path.join(buildDir, 'index.html');
  if (fs.existsSync(indexPath)) {
    const indexContent = fs.readFileSync(indexPath, 'utf8');
    console.log('‚úÖ index.html exists');
    console.log('üìè index.html size:', indexContent.length, 'bytes');
    
    // Ki·ªÉm tra c√≥ div#root kh√¥ng
    if (indexContent.includes('<div id="root"></div>')) {
      console.log('‚úÖ Found div#root in index.html');
    } else {
      console.log('‚ùå Missing div#root in index.html');
    }
    
    // Ki·ªÉm tra c√≥ script tags kh√¥ng
    const scriptMatches = indexContent.match(/<script[^>]*>/g);
    if (scriptMatches) {
      console.log('‚úÖ Found', scriptMatches.length, 'script tags');
    } else {
      console.log('‚ùå No script tags found');
    }
  } else {
    console.log('‚ùå index.html not found in build');
  }
} else {
  console.log('‚ùå Build directory not found');
}

// 2. Ki·ªÉm tra iOS public files
console.log('\nüì± Checking iOS public files...');
if (fs.existsSync(publicDir)) {
  console.log('‚úÖ iOS public directory exists');
  const publicFiles = fs.readdirSync(publicDir);
  console.log('üìÑ iOS public files:', publicFiles);
  
  // Ki·ªÉm tra index.html trong iOS
  const iosIndexPath = path.join(publicDir, 'index.html');
  if (fs.existsSync(iosIndexPath)) {
    const iosIndexContent = fs.readFileSync(iosIndexPath, 'utf8');
    console.log('‚úÖ iOS index.html exists');
    console.log('üìè iOS index.html size:', iosIndexContent.length, 'bytes');
    
    // So s√°nh v·ªõi build version
    const buildIndexPath = path.join(buildDir, 'index.html');
    if (fs.existsSync(buildIndexPath)) {
      const buildIndexContent = fs.readFileSync(buildIndexPath, 'utf8');
      if (iosIndexContent === buildIndexContent) {
        console.log('‚úÖ iOS index.html matches build version');
      } else {
        console.log('‚ö†Ô∏è iOS index.html differs from build version');
      }
    }
  } else {
    console.log('‚ùå iOS index.html not found');
  }
} else {
  console.log('‚ùå iOS public directory not found');
}

// 3. Ki·ªÉm tra Capacitor config
console.log('\n‚öôÔ∏è Checking Capacitor configuration...');
const capacitorConfigPath = path.join(__dirname, 'capacitor.config.ts');
const iosCapacitorConfigPath = path.join(__dirname, 'ios', 'App', 'App', 'capacitor.config.json');

if (fs.existsSync(capacitorConfigPath)) {
  console.log('‚úÖ capacitor.config.ts exists');
  const configContent = fs.readFileSync(capacitorConfigPath, 'utf8');
  
  // Ki·ªÉm tra splash screen config
  if (configContent.includes('launchShowDuration')) {
    console.log('‚úÖ Splash screen config found');
  } else {
    console.log('‚ùå Splash screen config missing');
  }
  
  // Ki·ªÉm tra webDir
  if (configContent.includes('webDir: \'build\'')) {
    console.log('‚úÖ webDir set to build');
  } else {
    console.log('‚ùå webDir not set to build');
  }
} else {
  console.log('‚ùå capacitor.config.ts not found');
}

if (fs.existsSync(iosCapacitorConfigPath)) {
  console.log('‚úÖ iOS capacitor.config.json exists');
  const iosConfigContent = fs.readFileSync(iosCapacitorConfigPath, 'utf8');
  const iosConfig = JSON.parse(iosConfigContent);
  
  console.log('üì± iOS Config:');
  console.log('  - appId:', iosConfig.appId);
  console.log('  - appName:', iosConfig.appName);
  console.log('  - webDir:', iosConfig.webDir);
  console.log('  - splashScreen:', iosConfig.plugins?.SplashScreen);
} else {
  console.log('‚ùå iOS capacitor.config.json not found');
}

// 4. Ki·ªÉm tra MainViewController
console.log('\nüçé Checking iOS MainViewController...');
const mainViewControllerPath = path.join(__dirname, 'ios', 'App', 'App', 'MainViewController.swift');
if (fs.existsSync(mainViewControllerPath)) {
  console.log('‚úÖ MainViewController.swift exists');
  const controllerContent = fs.readFileSync(mainViewControllerPath, 'utf8');
  
  if (controllerContent.includes('CAPBridgeViewController')) {
    console.log('‚úÖ Extends CAPBridgeViewController');
  } else {
    console.log('‚ùå Does not extend CAPBridgeViewController');
  }
  
  if (controllerContent.includes('webViewConfiguration')) {
    console.log('‚úÖ Has webViewConfiguration override');
  } else {
    console.log('‚ùå Missing webViewConfiguration override');
  }
} else {
  console.log('‚ùå MainViewController.swift not found');
}

// 5. Ki·ªÉm tra App.js
console.log('\n‚öõÔ∏è Checking React App.js...');
const appJsPath = path.join(__dirname, 'src', 'App.js');
if (fs.existsSync(appJsPath)) {
  console.log('‚úÖ App.js exists');
  const appContent = fs.readFileSync(appJsPath, 'utf8');
  
  // Ki·ªÉm tra loading state
  if (appContent.includes('const [loading, setLoading] = useState(true)')) {
    console.log('‚úÖ Loading state initialized');
  } else {
    console.log('‚ùå Loading state not initialized');
  }
  
  // Ki·ªÉm tra safety timeout
  if (appContent.includes('safetyTimeout')) {
    console.log('‚úÖ Safety timeout implemented');
  } else {
    console.log('‚ùå Safety timeout missing');
  }
  
  // Ki·ªÉm tra bundle protection
  if (appContent.includes('bundleProtectionFailed')) {
    console.log('‚úÖ Bundle protection check exists');
  } else {
    console.log('‚ùå Bundle protection check missing');
  }
} else {
  console.log('‚ùå App.js not found');
}

// 6. Recommendations
console.log('\nüí° RECOMMENDATIONS:');
console.log('==================');
console.log('1. ‚úÖ Ensure splash screen shows for at least 2 seconds');
console.log('2. ‚úÖ Check that loading state is properly managed');
console.log('3. ‚úÖ Verify WebView loads correctly in MainViewController');
console.log('4. ‚úÖ Test on actual device, not just simulator');
console.log('5. ‚úÖ Check Xcode console for any JavaScript errors');
console.log('6. ‚úÖ Ensure all static assets are properly copied');

console.log('\nüîß NEXT STEPS:');
console.log('==============');
console.log('1. Build and sync: npm run build:win && npx cap sync ios');
console.log('2. Open in Xcode: npx cap open ios');
console.log('3. Build for device (not simulator)');
console.log('4. Check Xcode console for errors');
console.log('5. Test on physical device');

console.log('\n‚ú® Debug complete!');

